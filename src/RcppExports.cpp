// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// kernmat_Matern32_cpp
Rcpp::List kernmat_Matern32_cpp(const arma::mat& X1, const arma::mat& X2, const arma::mat& Z1, const arma::mat& Z2, const arma::vec& parameters);
RcppExport SEXP _ace_kernmat_Matern32_cpp(SEXP X1SEXP, SEXP X2SEXP, SEXP Z1SEXP, SEXP Z2SEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(kernmat_Matern32_cpp(X1, X2, Z1, Z2, parameters));
    return rcpp_result_gen;
END_RCPP
}
// kernmat_Matern32_symmetric_cpp
Rcpp::List kernmat_Matern32_symmetric_cpp(const arma::mat& X, const arma::mat& Z, const arma::vec& parameters);
RcppExport SEXP _ace_kernmat_Matern32_symmetric_cpp(SEXP XSEXP, SEXP ZSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(kernmat_Matern32_symmetric_cpp(X, Z, parameters));
    return rcpp_result_gen;
END_RCPP
}
// grad_Matern_cpp
arma::vec grad_Matern_cpp(const arma::vec& y, const arma::mat& X, const arma::mat& Z, arma::mat& Kfull, arma::cube& K, arma::mat& invKmatn, arma::vec& eigenval, const arma::vec& parameters, arma::vec& stats, const unsigned int& B, double std_y);
RcppExport SEXP _ace_grad_Matern_cpp(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP KfullSEXP, SEXP KSEXP, SEXP invKmatnSEXP, SEXP eigenvalSEXP, SEXP parametersSEXP, SEXP statsSEXP, SEXP BSEXP, SEXP std_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Kfull(KfullSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type invKmatn(invKmatnSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type eigenval(eigenvalSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type std_y(std_ySEXP);
    rcpp_result_gen = Rcpp::wrap(grad_Matern_cpp(y, X, Z, Kfull, K, invKmatn, eigenval, parameters, stats, B, std_y));
    return rcpp_result_gen;
END_RCPP
}
// kernmat_SE_cpp
Rcpp::List kernmat_SE_cpp(const arma::mat& X1, const arma::mat& X2, const arma::mat& Z1, const arma::mat& Z2, const arma::vec& parameters);
RcppExport SEXP _ace_kernmat_SE_cpp(SEXP X1SEXP, SEXP X2SEXP, SEXP Z1SEXP, SEXP Z2SEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z1(Z1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z2(Z2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(kernmat_SE_cpp(X1, X2, Z1, Z2, parameters));
    return rcpp_result_gen;
END_RCPP
}
// kernmat_SE_symmetric_cpp
Rcpp::List kernmat_SE_symmetric_cpp(const arma::mat& X, const arma::mat& Z, const arma::vec& parameters);
RcppExport SEXP _ace_kernmat_SE_symmetric_cpp(SEXP XSEXP, SEXP ZSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(kernmat_SE_symmetric_cpp(X, Z, parameters));
    return rcpp_result_gen;
END_RCPP
}
// invkernel_cpp
Rcpp::List invkernel_cpp(arma::mat pdmat, const double& sigma);
RcppExport SEXP _ace_invkernel_cpp(SEXP pdmatSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type pdmat(pdmatSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(invkernel_cpp(pdmat, sigma));
    return rcpp_result_gen;
END_RCPP
}
// grad_SE_cpp
arma::vec grad_SE_cpp(const arma::vec& y, const arma::mat& X, const arma::mat& Z, const arma::mat& Kfull, const arma::cube& K, const arma::mat& invKmatn, const arma::vec& eigenval, const arma::vec& parameters, arma::vec& stats, const unsigned int& B, double std_y);
RcppExport SEXP _ace_grad_SE_cpp(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP KfullSEXP, SEXP KSEXP, SEXP invKmatnSEXP, SEXP eigenvalSEXP, SEXP parametersSEXP, SEXP statsSEXP, SEXP BSEXP, SEXP std_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kfull(KfullSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invKmatn(invKmatnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eigenval(eigenvalSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type stats(statsSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type std_y(std_ySEXP);
    rcpp_result_gen = Rcpp::wrap(grad_SE_cpp(y, X, Z, Kfull, K, invKmatn, eigenval, parameters, stats, B, std_y));
    return rcpp_result_gen;
END_RCPP
}
// ncs_basis
arma::mat ncs_basis(arma::colvec x, arma::vec knots);
RcppExport SEXP _ace_ncs_basis(SEXP xSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(ncs_basis(x, knots));
    return rcpp_result_gen;
END_RCPP
}
// ncs_basis_deriv
arma::mat ncs_basis_deriv(arma::colvec x, arma::vec knots);
RcppExport SEXP _ace_ncs_basis_deriv(SEXP xSEXP, SEXP knotsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type knots(knotsSEXP);
    rcpp_result_gen = Rcpp::wrap(ncs_basis_deriv(x, knots));
    return rcpp_result_gen;
END_RCPP
}
// Nesterov_cpp
bool Nesterov_cpp(double learn_rate, double momentum, arma::vec& nu, const arma::vec& grad, arma::vec& para);
RcppExport SEXP _ace_Nesterov_cpp(SEXP learn_rateSEXP, SEXP momentumSEXP, SEXP nuSEXP, SEXP gradSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type learn_rate(learn_rateSEXP);
    Rcpp::traits::input_parameter< double >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(Nesterov_cpp(learn_rate, momentum, nu, grad, para));
    return rcpp_result_gen;
END_RCPP
}
// Nadam_cpp
bool Nadam_cpp(double iter, double learn_rate, double beta1, double beta2, double eps, arma::vec& m, arma::vec& v, const arma::vec& grad, arma::vec& para);
RcppExport SEXP _ace_Nadam_cpp(SEXP iterSEXP, SEXP learn_rateSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP epsSEXP, SEXP mSEXP, SEXP vSEXP, SEXP gradSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type learn_rate(learn_rateSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(Nadam_cpp(iter, learn_rate, beta1, beta2, eps, m, v, grad, para));
    return rcpp_result_gen;
END_RCPP
}
// Adam_cpp
bool Adam_cpp(double iter, double learn_rate, double beta1, double beta2, double eps, arma::vec& m, arma::vec& v, const arma::vec& grad, arma::vec& para);
RcppExport SEXP _ace_Adam_cpp(SEXP iterSEXP, SEXP learn_rateSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP epsSEXP, SEXP mSEXP, SEXP vSEXP, SEXP gradSEXP, SEXP paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type learn_rate(learn_rateSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type grad(gradSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type para(paraSEXP);
    rcpp_result_gen = Rcpp::wrap(Adam_cpp(iter, learn_rate, beta1, beta2, eps, m, v, grad, para));
    return rcpp_result_gen;
END_RCPP
}
// pred_cpp
Rcpp::List pred_cpp(const arma::vec& y_X, const double sigma, const double mu, const arma::mat& invK_XX, arma::mat& K_xX, arma::mat K_xx, double mean_y, double std_y);
RcppExport SEXP _ace_pred_cpp(SEXP y_XSEXP, SEXP sigmaSEXP, SEXP muSEXP, SEXP invK_XXSEXP, SEXP K_xXSEXP, SEXP K_xxSEXP, SEXP mean_ySEXP, SEXP std_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_X(y_XSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invK_XX(invK_XXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type K_xX(K_xXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type K_xx(K_xxSEXP);
    Rcpp::traits::input_parameter< double >::type mean_y(mean_ySEXP);
    Rcpp::traits::input_parameter< double >::type std_y(std_ySEXP);
    rcpp_result_gen = Rcpp::wrap(pred_cpp(y_X, sigma, mu, invK_XX, K_xX, K_xx, mean_y, std_y));
    return rcpp_result_gen;
END_RCPP
}
// pred_marginal_cpp
Rcpp::List pred_marginal_cpp(const arma::vec& y_X, const arma::colvec& Z_x, const double sigma, const double mu, const arma::mat& invK_XX, const arma::cube& K_xX, const arma::cube& K_xx, const double& mean_y, const double& std_y, const double& std_Z, bool calculate_ate);
RcppExport SEXP _ace_pred_marginal_cpp(SEXP y_XSEXP, SEXP Z_xSEXP, SEXP sigmaSEXP, SEXP muSEXP, SEXP invK_XXSEXP, SEXP K_xXSEXP, SEXP K_xxSEXP, SEXP mean_ySEXP, SEXP std_ySEXP, SEXP std_ZSEXP, SEXP calculate_ateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_X(y_XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type Z_x(Z_xSEXP);
    Rcpp::traits::input_parameter< const double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invK_XX(invK_XXSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type K_xX(K_xXSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type K_xx(K_xxSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean_y(mean_ySEXP);
    Rcpp::traits::input_parameter< const double& >::type std_y(std_ySEXP);
    Rcpp::traits::input_parameter< const double& >::type std_Z(std_ZSEXP);
    Rcpp::traits::input_parameter< bool >::type calculate_ate(calculate_ateSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_marginal_cpp(y_X, Z_x, sigma, mu, invK_XX, K_xX, K_xx, mean_y, std_y, std_Z, calculate_ate));
    return rcpp_result_gen;
END_RCPP
}
// stats_cpp
arma::rowvec stats_cpp(const arma::colvec& y, const arma::mat& Kmat, const arma::mat& invKmatn, const arma::vec& eigenval, const double mu, double std_y);
RcppExport SEXP _ace_stats_cpp(SEXP ySEXP, SEXP KmatSEXP, SEXP invKmatnSEXP, SEXP eigenvalSEXP, SEXP muSEXP, SEXP std_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Kmat(KmatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type invKmatn(invKmatnSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eigenval(eigenvalSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type std_y(std_ySEXP);
    rcpp_result_gen = Rcpp::wrap(stats_cpp(y, Kmat, invKmatn, eigenval, mu, std_y));
    return rcpp_result_gen;
END_RCPP
}
// mu_solution_cpp
double mu_solution_cpp(arma::colvec& y, arma::mat& invKmat);
RcppExport SEXP _ace_mu_solution_cpp(SEXP ySEXP, SEXP invKmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type invKmat(invKmatSEXP);
    rcpp_result_gen = Rcpp::wrap(mu_solution_cpp(y, invKmat));
    return rcpp_result_gen;
END_RCPP
}
// normalize_train
arma::mat normalize_train(arma::vec& y, arma::mat& X, arma::mat& Z);
RcppExport SEXP _ace_normalize_train(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_train(y, X, Z));
    return rcpp_result_gen;
END_RCPP
}
// normalize_test
void normalize_test(arma::mat& X, arma::mat& Z, const arma::mat& moments);
RcppExport SEXP _ace_normalize_test(SEXP XSEXP, SEXP ZSEXP, SEXP momentsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type moments(momentsSEXP);
    normalize_test(X, Z, moments);
    return R_NilValue;
END_RCPP
}
// norm_clip_cpp
void norm_clip_cpp(bool flag, arma::vec& grads, double max_length);
RcppExport SEXP _ace_norm_clip_cpp(SEXP flagSEXP, SEXP gradsSEXP, SEXP max_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type flag(flagSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type grads(gradsSEXP);
    Rcpp::traits::input_parameter< double >::type max_length(max_lengthSEXP);
    norm_clip_cpp(flag, grads, max_length);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ace_kernmat_Matern32_cpp", (DL_FUNC) &_ace_kernmat_Matern32_cpp, 5},
    {"_ace_kernmat_Matern32_symmetric_cpp", (DL_FUNC) &_ace_kernmat_Matern32_symmetric_cpp, 3},
    {"_ace_grad_Matern_cpp", (DL_FUNC) &_ace_grad_Matern_cpp, 11},
    {"_ace_kernmat_SE_cpp", (DL_FUNC) &_ace_kernmat_SE_cpp, 5},
    {"_ace_kernmat_SE_symmetric_cpp", (DL_FUNC) &_ace_kernmat_SE_symmetric_cpp, 3},
    {"_ace_invkernel_cpp", (DL_FUNC) &_ace_invkernel_cpp, 2},
    {"_ace_grad_SE_cpp", (DL_FUNC) &_ace_grad_SE_cpp, 11},
    {"_ace_ncs_basis", (DL_FUNC) &_ace_ncs_basis, 2},
    {"_ace_ncs_basis_deriv", (DL_FUNC) &_ace_ncs_basis_deriv, 2},
    {"_ace_Nesterov_cpp", (DL_FUNC) &_ace_Nesterov_cpp, 5},
    {"_ace_Nadam_cpp", (DL_FUNC) &_ace_Nadam_cpp, 9},
    {"_ace_Adam_cpp", (DL_FUNC) &_ace_Adam_cpp, 9},
    {"_ace_pred_cpp", (DL_FUNC) &_ace_pred_cpp, 8},
    {"_ace_pred_marginal_cpp", (DL_FUNC) &_ace_pred_marginal_cpp, 11},
    {"_ace_stats_cpp", (DL_FUNC) &_ace_stats_cpp, 6},
    {"_ace_mu_solution_cpp", (DL_FUNC) &_ace_mu_solution_cpp, 2},
    {"_ace_normalize_train", (DL_FUNC) &_ace_normalize_train, 3},
    {"_ace_normalize_test", (DL_FUNC) &_ace_normalize_test, 3},
    {"_ace_norm_clip_cpp", (DL_FUNC) &_ace_norm_clip_cpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_ace(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, TRUE);
}
